image: java:8-jdk

stages:
  - test
  - build
  - deploy

before_script:
  - echo `pwd`
  - echo "$CI_BUILD_NAME, $CI_BUILD_REF_NAME $CI_BUILD_STAGE"
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - echo "$HOSTS_TEST" > "$(pwd)/deployment/environments/test/hosts"
  - echo "$HOSTS_STAGE" > "$(pwd)/deployment/environments/stage/hosts"
  - echo "$HOSTS_VARS" > "$(pwd)/deployment/vars.yml"

cache:
  paths:
    - .gradle/wrapper
    - .gradle/caches

build:
  stage: build
  script:
    - ./gradlew assemble
  artifacts:
    paths:
      - build/libs/*.jar
    expire_in: 1 week
  only:
    - master
    - tags

test_java:
  stage: test
  services:
    - name: docker.elastic.co/elasticsearch/elasticsearch:6.8.3
      alias: elasticsearch
      command: [ "bin/elasticsearch", "-Ediscovery.type=single-node" ]
  script:
    - ./gradlew test:cleanTest test:test
    - ./gradlew search:cleanTest search:test
    - ./gradlew web:cleanTest web:compileJava -x test
  only:
    changes:
      - "**/*.java"
      - "**/resources/*/*.json"

deploy:
  stage: deploy
  before_script:
    - apt-get -qq update && apt-get -qq install -y python3
    - apt-get -qq install -y python python-virtualenv python-pip
    - virtualenv -p python3 .deployment
    - source ./.deployment/bin/activate
    - pip install -U setuptools
    - pip install -r requirements.txt
  script:
    - cd deployment
    - ansible-playbook deploy.xml -i environments/test
  only:
    - tags
  except:
    - branches
  after_script:
    - echo "Test deploy complete"

deploy-stage:
  stage: deploy
  before_script:
    - apt-get -qq update && apt-get -qq install -y python3
    - apt-get -qq install -y python python-virtualenv python-pip
    - virtualenv -p python3 .deployment
    - source ./.deployment/bin/activate
    - pip install -U setuptools
    - pip install -r requirements.txt
  script:
    - cd deployment
    - ansible-playbook deploy.xml -i environments/stage
  only:
    - tags
  except:
    - branches
  after_script:
    - echo "Stage deploy complete"

deploy-live:
   stage: deploy
   before_script:
     - apt-get -qq update && apt-get -qq install -y python3
     - apt-get -qq install -y python python-virtualenv python-pip
     - virtualenv -p python3 .deployment
     - source ./.deployment/bin/activate
     - pip install -r requirements.txt
   script:
     - cd deployement
     - ansible-playbook deploy.xml -i environments/prod
   only:
     - /^release-.*/
   after_script:
     - echo "LIVE deploy complete"

after_script:
  - echo "End CI"
