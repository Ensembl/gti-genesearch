/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ensembl.genesearch.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Xref extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Xref\",\"namespace\":\"org.ensembl.genesearch.avro\",\"fields\":[{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"linkage_types\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Linkage_type\",\"fields\":[{\"name\":\"evidence\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Source\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"associated_xrefs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Associated_xref\",\"fields\":[{\"name\":\"experimental_evidence\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Experimental_evidence\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"}]}}},{\"name\":\"host\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Host\",\"fields\":[{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"display_id\",\"type\":\"string\"}]}}},{\"name\":\"phenotype\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phenotype\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"parents\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence display_id;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Linkage_type> linkage_types;
  @Deprecated public java.lang.CharSequence primary_id;
  @Deprecated public java.lang.CharSequence dbname;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Associated_xref> associated_xrefs;
  @Deprecated public java.lang.CharSequence parents;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Xref() {}

  /**
   * All-args constructor.
   */
  public Xref(java.lang.CharSequence display_id, java.util.List<org.ensembl.genesearch.avro.Linkage_type> linkage_types, java.lang.CharSequence primary_id, java.lang.CharSequence dbname, java.util.List<org.ensembl.genesearch.avro.Associated_xref> associated_xrefs, java.lang.CharSequence parents) {
    this.display_id = display_id;
    this.linkage_types = linkage_types;
    this.primary_id = primary_id;
    this.dbname = dbname;
    this.associated_xrefs = associated_xrefs;
    this.parents = parents;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return display_id;
    case 1: return linkage_types;
    case 2: return primary_id;
    case 3: return dbname;
    case 4: return associated_xrefs;
    case 5: return parents;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: display_id = (java.lang.CharSequence)value$; break;
    case 1: linkage_types = (java.util.List<org.ensembl.genesearch.avro.Linkage_type>)value$; break;
    case 2: primary_id = (java.lang.CharSequence)value$; break;
    case 3: dbname = (java.lang.CharSequence)value$; break;
    case 4: associated_xrefs = (java.util.List<org.ensembl.genesearch.avro.Associated_xref>)value$; break;
    case 5: parents = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'display_id' field.
   */
  public java.lang.CharSequence getDisplayId() {
    return display_id;
  }

  /**
   * Sets the value of the 'display_id' field.
   * @param value the value to set.
   */
  public void setDisplayId(java.lang.CharSequence value) {
    this.display_id = value;
  }

  /**
   * Gets the value of the 'linkage_types' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Linkage_type> getLinkageTypes() {
    return linkage_types;
  }

  /**
   * Sets the value of the 'linkage_types' field.
   * @param value the value to set.
   */
  public void setLinkageTypes(java.util.List<org.ensembl.genesearch.avro.Linkage_type> value) {
    this.linkage_types = value;
  }

  /**
   * Gets the value of the 'primary_id' field.
   */
  public java.lang.CharSequence getPrimaryId() {
    return primary_id;
  }

  /**
   * Sets the value of the 'primary_id' field.
   * @param value the value to set.
   */
  public void setPrimaryId(java.lang.CharSequence value) {
    this.primary_id = value;
  }

  /**
   * Gets the value of the 'dbname' field.
   */
  public java.lang.CharSequence getDbname() {
    return dbname;
  }

  /**
   * Sets the value of the 'dbname' field.
   * @param value the value to set.
   */
  public void setDbname(java.lang.CharSequence value) {
    this.dbname = value;
  }

  /**
   * Gets the value of the 'associated_xrefs' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Associated_xref> getAssociatedXrefs() {
    return associated_xrefs;
  }

  /**
   * Sets the value of the 'associated_xrefs' field.
   * @param value the value to set.
   */
  public void setAssociatedXrefs(java.util.List<org.ensembl.genesearch.avro.Associated_xref> value) {
    this.associated_xrefs = value;
  }

  /**
   * Gets the value of the 'parents' field.
   */
  public java.lang.CharSequence getParents() {
    return parents;
  }

  /**
   * Sets the value of the 'parents' field.
   * @param value the value to set.
   */
  public void setParents(java.lang.CharSequence value) {
    this.parents = value;
  }

  /** Creates a new Xref RecordBuilder */
  public static org.ensembl.genesearch.avro.Xref.Builder newBuilder() {
    return new org.ensembl.genesearch.avro.Xref.Builder();
  }
  
  /** Creates a new Xref RecordBuilder by copying an existing Builder */
  public static org.ensembl.genesearch.avro.Xref.Builder newBuilder(org.ensembl.genesearch.avro.Xref.Builder other) {
    return new org.ensembl.genesearch.avro.Xref.Builder(other);
  }
  
  /** Creates a new Xref RecordBuilder by copying an existing Xref instance */
  public static org.ensembl.genesearch.avro.Xref.Builder newBuilder(org.ensembl.genesearch.avro.Xref other) {
    return new org.ensembl.genesearch.avro.Xref.Builder(other);
  }
  
  /**
   * RecordBuilder for Xref instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Xref>
    implements org.apache.avro.data.RecordBuilder<Xref> {

    private java.lang.CharSequence display_id;
    private java.util.List<org.ensembl.genesearch.avro.Linkage_type> linkage_types;
    private java.lang.CharSequence primary_id;
    private java.lang.CharSequence dbname;
    private java.util.List<org.ensembl.genesearch.avro.Associated_xref> associated_xrefs;
    private java.lang.CharSequence parents;

    /** Creates a new Builder */
    private Builder() {
      super(org.ensembl.genesearch.avro.Xref.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ensembl.genesearch.avro.Xref.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.display_id)) {
        this.display_id = data().deepCopy(fields()[0].schema(), other.display_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkage_types)) {
        this.linkage_types = data().deepCopy(fields()[1].schema(), other.linkage_types);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.primary_id)) {
        this.primary_id = data().deepCopy(fields()[2].schema(), other.primary_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dbname)) {
        this.dbname = data().deepCopy(fields()[3].schema(), other.dbname);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.associated_xrefs)) {
        this.associated_xrefs = data().deepCopy(fields()[4].schema(), other.associated_xrefs);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parents)) {
        this.parents = data().deepCopy(fields()[5].schema(), other.parents);
        fieldSetFlags()[5] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Xref instance */
    private Builder(org.ensembl.genesearch.avro.Xref other) {
            super(org.ensembl.genesearch.avro.Xref.SCHEMA$);
      if (isValidValue(fields()[0], other.display_id)) {
        this.display_id = data().deepCopy(fields()[0].schema(), other.display_id);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.linkage_types)) {
        this.linkage_types = data().deepCopy(fields()[1].schema(), other.linkage_types);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.primary_id)) {
        this.primary_id = data().deepCopy(fields()[2].schema(), other.primary_id);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.dbname)) {
        this.dbname = data().deepCopy(fields()[3].schema(), other.dbname);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.associated_xrefs)) {
        this.associated_xrefs = data().deepCopy(fields()[4].schema(), other.associated_xrefs);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.parents)) {
        this.parents = data().deepCopy(fields()[5].schema(), other.parents);
        fieldSetFlags()[5] = true;
      }
    }

    /** Gets the value of the 'display_id' field */
    public java.lang.CharSequence getDisplayId() {
      return display_id;
    }
    
    /** Sets the value of the 'display_id' field */
    public org.ensembl.genesearch.avro.Xref.Builder setDisplayId(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.display_id = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'display_id' field has been set */
    public boolean hasDisplayId() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'display_id' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearDisplayId() {
      display_id = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'linkage_types' field */
    public java.util.List<org.ensembl.genesearch.avro.Linkage_type> getLinkageTypes() {
      return linkage_types;
    }
    
    /** Sets the value of the 'linkage_types' field */
    public org.ensembl.genesearch.avro.Xref.Builder setLinkageTypes(java.util.List<org.ensembl.genesearch.avro.Linkage_type> value) {
      validate(fields()[1], value);
      this.linkage_types = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'linkage_types' field has been set */
    public boolean hasLinkageTypes() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'linkage_types' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearLinkageTypes() {
      linkage_types = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'primary_id' field */
    public java.lang.CharSequence getPrimaryId() {
      return primary_id;
    }
    
    /** Sets the value of the 'primary_id' field */
    public org.ensembl.genesearch.avro.Xref.Builder setPrimaryId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.primary_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'primary_id' field has been set */
    public boolean hasPrimaryId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'primary_id' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearPrimaryId() {
      primary_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'dbname' field */
    public java.lang.CharSequence getDbname() {
      return dbname;
    }
    
    /** Sets the value of the 'dbname' field */
    public org.ensembl.genesearch.avro.Xref.Builder setDbname(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.dbname = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'dbname' field has been set */
    public boolean hasDbname() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'dbname' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearDbname() {
      dbname = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'associated_xrefs' field */
    public java.util.List<org.ensembl.genesearch.avro.Associated_xref> getAssociatedXrefs() {
      return associated_xrefs;
    }
    
    /** Sets the value of the 'associated_xrefs' field */
    public org.ensembl.genesearch.avro.Xref.Builder setAssociatedXrefs(java.util.List<org.ensembl.genesearch.avro.Associated_xref> value) {
      validate(fields()[4], value);
      this.associated_xrefs = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'associated_xrefs' field has been set */
    public boolean hasAssociatedXrefs() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'associated_xrefs' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearAssociatedXrefs() {
      associated_xrefs = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'parents' field */
    public java.lang.CharSequence getParents() {
      return parents;
    }
    
    /** Sets the value of the 'parents' field */
    public org.ensembl.genesearch.avro.Xref.Builder setParents(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.parents = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'parents' field has been set */
    public boolean hasParents() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'parents' field */
    public org.ensembl.genesearch.avro.Xref.Builder clearParents() {
      parents = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    @Override
    public Xref build() {
      try {
        Xref record = new Xref();
        record.display_id = fieldSetFlags()[0] ? this.display_id : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.linkage_types = fieldSetFlags()[1] ? this.linkage_types : (java.util.List<org.ensembl.genesearch.avro.Linkage_type>) defaultValue(fields()[1]);
        record.primary_id = fieldSetFlags()[2] ? this.primary_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.dbname = fieldSetFlags()[3] ? this.dbname : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.associated_xrefs = fieldSetFlags()[4] ? this.associated_xrefs : (java.util.List<org.ensembl.genesearch.avro.Associated_xref>) defaultValue(fields()[4]);
        record.parents = fieldSetFlags()[5] ? this.parents : (java.lang.CharSequence) defaultValue(fields()[5]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
