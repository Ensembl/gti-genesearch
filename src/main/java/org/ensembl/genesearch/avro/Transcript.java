/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ensembl.genesearch.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Transcript extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Transcript\",\"namespace\":\"org.ensembl.genesearch.avro\",\"fields\":[{\"name\":\"biotype\",\"type\":\"string\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"strand\",\"type\":\"boolean\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"seq_region_name\",\"type\":\"string\"},{\"name\":\"translations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Translation\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"coding_start\",\"type\":\"int\"},{\"name\":\"coding_end\",\"type\":\"int\"},{\"name\":\"xrefs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Xref\",\"fields\":[{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"linkage_types\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Linkage_type\",\"fields\":[{\"name\":\"evidence\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Source\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"associated_xrefs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Associated_xref\",\"fields\":[{\"name\":\"experimental_evidence\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Experimental_evidence\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"}]}}},{\"name\":\"host\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Host\",\"fields\":[{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"display_id\",\"type\":\"string\"}]}}},{\"name\":\"phenotype\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phenotype\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"parents\",\"type\":\"string\"}]}}},{\"name\":\"protein_features\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Protein_feature\",\"fields\":[{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"interpro_ac\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}]}}}]}}},{\"name\":\"xrefs\",\"type\":{\"type\":\"array\",\"items\":\"Xref\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence biotype;
  @Deprecated public int end;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public int start;
  @Deprecated public boolean strand;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence seq_region_name;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Translation> translations;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Xref> xrefs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Transcript() {}

  /**
   * All-args constructor.
   */
  public Transcript(java.lang.CharSequence biotype, java.lang.Integer end, java.lang.CharSequence description, java.lang.CharSequence id, java.lang.Integer start, java.lang.Boolean strand, java.lang.CharSequence name, java.lang.CharSequence seq_region_name, java.util.List<org.ensembl.genesearch.avro.Translation> translations, java.util.List<org.ensembl.genesearch.avro.Xref> xrefs) {
    this.biotype = biotype;
    this.end = end;
    this.description = description;
    this.id = id;
    this.start = start;
    this.strand = strand;
    this.name = name;
    this.seq_region_name = seq_region_name;
    this.translations = translations;
    this.xrefs = xrefs;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return biotype;
    case 1: return end;
    case 2: return description;
    case 3: return id;
    case 4: return start;
    case 5: return strand;
    case 6: return name;
    case 7: return seq_region_name;
    case 8: return translations;
    case 9: return xrefs;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: biotype = (java.lang.CharSequence)value$; break;
    case 1: end = (java.lang.Integer)value$; break;
    case 2: description = (java.lang.CharSequence)value$; break;
    case 3: id = (java.lang.CharSequence)value$; break;
    case 4: start = (java.lang.Integer)value$; break;
    case 5: strand = (java.lang.Boolean)value$; break;
    case 6: name = (java.lang.CharSequence)value$; break;
    case 7: seq_region_name = (java.lang.CharSequence)value$; break;
    case 8: translations = (java.util.List<org.ensembl.genesearch.avro.Translation>)value$; break;
    case 9: xrefs = (java.util.List<org.ensembl.genesearch.avro.Xref>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'biotype' field.
   */
  public java.lang.CharSequence getBiotype() {
    return biotype;
  }

  /**
   * Sets the value of the 'biotype' field.
   * @param value the value to set.
   */
  public void setBiotype(java.lang.CharSequence value) {
    this.biotype = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'strand' field.
   */
  public java.lang.Boolean getStrand() {
    return strand;
  }

  /**
   * Sets the value of the 'strand' field.
   * @param value the value to set.
   */
  public void setStrand(java.lang.Boolean value) {
    this.strand = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'seq_region_name' field.
   */
  public java.lang.CharSequence getSeqRegionName() {
    return seq_region_name;
  }

  /**
   * Sets the value of the 'seq_region_name' field.
   * @param value the value to set.
   */
  public void setSeqRegionName(java.lang.CharSequence value) {
    this.seq_region_name = value;
  }

  /**
   * Gets the value of the 'translations' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Translation> getTranslations() {
    return translations;
  }

  /**
   * Sets the value of the 'translations' field.
   * @param value the value to set.
   */
  public void setTranslations(java.util.List<org.ensembl.genesearch.avro.Translation> value) {
    this.translations = value;
  }

  /**
   * Gets the value of the 'xrefs' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Xref> getXrefs() {
    return xrefs;
  }

  /**
   * Sets the value of the 'xrefs' field.
   * @param value the value to set.
   */
  public void setXrefs(java.util.List<org.ensembl.genesearch.avro.Xref> value) {
    this.xrefs = value;
  }

  /** Creates a new Transcript RecordBuilder */
  public static org.ensembl.genesearch.avro.Transcript.Builder newBuilder() {
    return new org.ensembl.genesearch.avro.Transcript.Builder();
  }
  
  /** Creates a new Transcript RecordBuilder by copying an existing Builder */
  public static org.ensembl.genesearch.avro.Transcript.Builder newBuilder(org.ensembl.genesearch.avro.Transcript.Builder other) {
    return new org.ensembl.genesearch.avro.Transcript.Builder(other);
  }
  
  /** Creates a new Transcript RecordBuilder by copying an existing Transcript instance */
  public static org.ensembl.genesearch.avro.Transcript.Builder newBuilder(org.ensembl.genesearch.avro.Transcript other) {
    return new org.ensembl.genesearch.avro.Transcript.Builder(other);
  }
  
  /**
   * RecordBuilder for Transcript instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Transcript>
    implements org.apache.avro.data.RecordBuilder<Transcript> {

    private java.lang.CharSequence biotype;
    private int end;
    private java.lang.CharSequence description;
    private java.lang.CharSequence id;
    private int start;
    private boolean strand;
    private java.lang.CharSequence name;
    private java.lang.CharSequence seq_region_name;
    private java.util.List<org.ensembl.genesearch.avro.Translation> translations;
    private java.util.List<org.ensembl.genesearch.avro.Xref> xrefs;

    /** Creates a new Builder */
    private Builder() {
      super(org.ensembl.genesearch.avro.Transcript.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ensembl.genesearch.avro.Transcript.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.biotype)) {
        this.biotype = data().deepCopy(fields()[0].schema(), other.biotype);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start)) {
        this.start = data().deepCopy(fields()[4].schema(), other.start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.strand)) {
        this.strand = data().deepCopy(fields()[5].schema(), other.strand);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.seq_region_name)) {
        this.seq_region_name = data().deepCopy(fields()[7].schema(), other.seq_region_name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.translations)) {
        this.translations = data().deepCopy(fields()[8].schema(), other.translations);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[9].schema(), other.xrefs);
        fieldSetFlags()[9] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Transcript instance */
    private Builder(org.ensembl.genesearch.avro.Transcript other) {
            super(org.ensembl.genesearch.avro.Transcript.SCHEMA$);
      if (isValidValue(fields()[0], other.biotype)) {
        this.biotype = data().deepCopy(fields()[0].schema(), other.biotype);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.end)) {
        this.end = data().deepCopy(fields()[1].schema(), other.end);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.description)) {
        this.description = data().deepCopy(fields()[2].schema(), other.description);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.id)) {
        this.id = data().deepCopy(fields()[3].schema(), other.id);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.start)) {
        this.start = data().deepCopy(fields()[4].schema(), other.start);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.strand)) {
        this.strand = data().deepCopy(fields()[5].schema(), other.strand);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.name)) {
        this.name = data().deepCopy(fields()[6].schema(), other.name);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.seq_region_name)) {
        this.seq_region_name = data().deepCopy(fields()[7].schema(), other.seq_region_name);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.translations)) {
        this.translations = data().deepCopy(fields()[8].schema(), other.translations);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[9].schema(), other.xrefs);
        fieldSetFlags()[9] = true;
      }
    }

    /** Gets the value of the 'biotype' field */
    public java.lang.CharSequence getBiotype() {
      return biotype;
    }
    
    /** Sets the value of the 'biotype' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setBiotype(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.biotype = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'biotype' field has been set */
    public boolean hasBiotype() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'biotype' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearBiotype() {
      biotype = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setEnd(int value) {
      validate(fields()[1], value);
      this.end = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'end' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearEnd() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.description = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'description' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearDescription() {
      description = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setId(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.id = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'id' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearId() {
      id = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setStart(int value) {
      validate(fields()[4], value);
      this.start = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'start' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearStart() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'strand' field */
    public java.lang.Boolean getStrand() {
      return strand;
    }
    
    /** Sets the value of the 'strand' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setStrand(boolean value) {
      validate(fields()[5], value);
      this.strand = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'strand' field has been set */
    public boolean hasStrand() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'strand' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearStrand() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setName(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.name = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'name' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearName() {
      name = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'seq_region_name' field */
    public java.lang.CharSequence getSeqRegionName() {
      return seq_region_name;
    }
    
    /** Sets the value of the 'seq_region_name' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setSeqRegionName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.seq_region_name = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'seq_region_name' field has been set */
    public boolean hasSeqRegionName() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'seq_region_name' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearSeqRegionName() {
      seq_region_name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'translations' field */
    public java.util.List<org.ensembl.genesearch.avro.Translation> getTranslations() {
      return translations;
    }
    
    /** Sets the value of the 'translations' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setTranslations(java.util.List<org.ensembl.genesearch.avro.Translation> value) {
      validate(fields()[8], value);
      this.translations = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'translations' field has been set */
    public boolean hasTranslations() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'translations' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearTranslations() {
      translations = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'xrefs' field */
    public java.util.List<org.ensembl.genesearch.avro.Xref> getXrefs() {
      return xrefs;
    }
    
    /** Sets the value of the 'xrefs' field */
    public org.ensembl.genesearch.avro.Transcript.Builder setXrefs(java.util.List<org.ensembl.genesearch.avro.Xref> value) {
      validate(fields()[9], value);
      this.xrefs = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'xrefs' field has been set */
    public boolean hasXrefs() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'xrefs' field */
    public org.ensembl.genesearch.avro.Transcript.Builder clearXrefs() {
      xrefs = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    @Override
    public Transcript build() {
      try {
        Transcript record = new Transcript();
        record.biotype = fieldSetFlags()[0] ? this.biotype : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.end = fieldSetFlags()[1] ? this.end : (java.lang.Integer) defaultValue(fields()[1]);
        record.description = fieldSetFlags()[2] ? this.description : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.id = fieldSetFlags()[3] ? this.id : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.start = fieldSetFlags()[4] ? this.start : (java.lang.Integer) defaultValue(fields()[4]);
        record.strand = fieldSetFlags()[5] ? this.strand : (java.lang.Boolean) defaultValue(fields()[5]);
        record.name = fieldSetFlags()[6] ? this.name : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.seq_region_name = fieldSetFlags()[7] ? this.seq_region_name : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.translations = fieldSetFlags()[8] ? this.translations : (java.util.List<org.ensembl.genesearch.avro.Translation>) defaultValue(fields()[8]);
        record.xrefs = fieldSetFlags()[9] ? this.xrefs : (java.util.List<org.ensembl.genesearch.avro.Xref>) defaultValue(fields()[9]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
