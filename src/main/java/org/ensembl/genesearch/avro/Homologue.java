/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ensembl.genesearch.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Homologue extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Homologue\",\"namespace\":\"org.ensembl.genesearch.avro\",\"fields\":[{\"name\":\"genome\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"stable_id\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence genome;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence stable_id;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Homologue() {}

  /**
   * All-args constructor.
   */
  public Homologue(java.lang.CharSequence genome, java.lang.CharSequence description, java.lang.CharSequence stable_id) {
    this.genome = genome;
    this.description = description;
    this.stable_id = stable_id;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return genome;
    case 1: return description;
    case 2: return stable_id;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: genome = (java.lang.CharSequence)value$; break;
    case 1: description = (java.lang.CharSequence)value$; break;
    case 2: stable_id = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'genome' field.
   */
  public java.lang.CharSequence getGenome() {
    return genome;
  }

  /**
   * Sets the value of the 'genome' field.
   * @param value the value to set.
   */
  public void setGenome(java.lang.CharSequence value) {
    this.genome = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'stable_id' field.
   */
  public java.lang.CharSequence getStableId() {
    return stable_id;
  }

  /**
   * Sets the value of the 'stable_id' field.
   * @param value the value to set.
   */
  public void setStableId(java.lang.CharSequence value) {
    this.stable_id = value;
  }

  /** Creates a new Homologue RecordBuilder */
  public static org.ensembl.genesearch.avro.Homologue.Builder newBuilder() {
    return new org.ensembl.genesearch.avro.Homologue.Builder();
  }
  
  /** Creates a new Homologue RecordBuilder by copying an existing Builder */
  public static org.ensembl.genesearch.avro.Homologue.Builder newBuilder(org.ensembl.genesearch.avro.Homologue.Builder other) {
    return new org.ensembl.genesearch.avro.Homologue.Builder(other);
  }
  
  /** Creates a new Homologue RecordBuilder by copying an existing Homologue instance */
  public static org.ensembl.genesearch.avro.Homologue.Builder newBuilder(org.ensembl.genesearch.avro.Homologue other) {
    return new org.ensembl.genesearch.avro.Homologue.Builder(other);
  }
  
  /**
   * RecordBuilder for Homologue instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Homologue>
    implements org.apache.avro.data.RecordBuilder<Homologue> {

    private java.lang.CharSequence genome;
    private java.lang.CharSequence description;
    private java.lang.CharSequence stable_id;

    /** Creates a new Builder */
    private Builder() {
      super(org.ensembl.genesearch.avro.Homologue.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ensembl.genesearch.avro.Homologue.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.genome)) {
        this.genome = data().deepCopy(fields()[0].schema(), other.genome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stable_id)) {
        this.stable_id = data().deepCopy(fields()[2].schema(), other.stable_id);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Homologue instance */
    private Builder(org.ensembl.genesearch.avro.Homologue other) {
            super(org.ensembl.genesearch.avro.Homologue.SCHEMA$);
      if (isValidValue(fields()[0], other.genome)) {
        this.genome = data().deepCopy(fields()[0].schema(), other.genome);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.description)) {
        this.description = data().deepCopy(fields()[1].schema(), other.description);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.stable_id)) {
        this.stable_id = data().deepCopy(fields()[2].schema(), other.stable_id);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'genome' field */
    public java.lang.CharSequence getGenome() {
      return genome;
    }
    
    /** Sets the value of the 'genome' field */
    public org.ensembl.genesearch.avro.Homologue.Builder setGenome(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.genome = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'genome' field has been set */
    public boolean hasGenome() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'genome' field */
    public org.ensembl.genesearch.avro.Homologue.Builder clearGenome() {
      genome = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ensembl.genesearch.avro.Homologue.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.description = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'description' field */
    public org.ensembl.genesearch.avro.Homologue.Builder clearDescription() {
      description = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'stable_id' field */
    public java.lang.CharSequence getStableId() {
      return stable_id;
    }
    
    /** Sets the value of the 'stable_id' field */
    public org.ensembl.genesearch.avro.Homologue.Builder setStableId(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.stable_id = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'stable_id' field has been set */
    public boolean hasStableId() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'stable_id' field */
    public org.ensembl.genesearch.avro.Homologue.Builder clearStableId() {
      stable_id = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Homologue build() {
      try {
        Homologue record = new Homologue();
        record.genome = fieldSetFlags()[0] ? this.genome : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.description = fieldSetFlags()[1] ? this.description : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.stable_id = fieldSetFlags()[2] ? this.stable_id : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
