/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ensembl.genesearch.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Annotation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Annotation\",\"namespace\":\"org.ensembl.genesearch.avro\",\"fields\":[{\"name\":\"phenotype\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"condition\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence phenotype;
  @Deprecated public java.lang.CharSequence host;
  @Deprecated public java.lang.CharSequence condition;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Annotation() {}

  /**
   * All-args constructor.
   */
  public Annotation(java.lang.CharSequence phenotype, java.lang.CharSequence host, java.lang.CharSequence condition) {
    this.phenotype = phenotype;
    this.host = host;
    this.condition = condition;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return phenotype;
    case 1: return host;
    case 2: return condition;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: phenotype = (java.lang.CharSequence)value$; break;
    case 1: host = (java.lang.CharSequence)value$; break;
    case 2: condition = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'phenotype' field.
   */
  public java.lang.CharSequence getPhenotype() {
    return phenotype;
  }

  /**
   * Sets the value of the 'phenotype' field.
   * @param value the value to set.
   */
  public void setPhenotype(java.lang.CharSequence value) {
    this.phenotype = value;
  }

  /**
   * Gets the value of the 'host' field.
   */
  public java.lang.CharSequence getHost() {
    return host;
  }

  /**
   * Sets the value of the 'host' field.
   * @param value the value to set.
   */
  public void setHost(java.lang.CharSequence value) {
    this.host = value;
  }

  /**
   * Gets the value of the 'condition' field.
   */
  public java.lang.CharSequence getCondition() {
    return condition;
  }

  /**
   * Sets the value of the 'condition' field.
   * @param value the value to set.
   */
  public void setCondition(java.lang.CharSequence value) {
    this.condition = value;
  }

  /** Creates a new Annotation RecordBuilder */
  public static org.ensembl.genesearch.avro.Annotation.Builder newBuilder() {
    return new org.ensembl.genesearch.avro.Annotation.Builder();
  }
  
  /** Creates a new Annotation RecordBuilder by copying an existing Builder */
  public static org.ensembl.genesearch.avro.Annotation.Builder newBuilder(org.ensembl.genesearch.avro.Annotation.Builder other) {
    return new org.ensembl.genesearch.avro.Annotation.Builder(other);
  }
  
  /** Creates a new Annotation RecordBuilder by copying an existing Annotation instance */
  public static org.ensembl.genesearch.avro.Annotation.Builder newBuilder(org.ensembl.genesearch.avro.Annotation other) {
    return new org.ensembl.genesearch.avro.Annotation.Builder(other);
  }
  
  /**
   * RecordBuilder for Annotation instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Annotation>
    implements org.apache.avro.data.RecordBuilder<Annotation> {

    private java.lang.CharSequence phenotype;
    private java.lang.CharSequence host;
    private java.lang.CharSequence condition;

    /** Creates a new Builder */
    private Builder() {
      super(org.ensembl.genesearch.avro.Annotation.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ensembl.genesearch.avro.Annotation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.phenotype)) {
        this.phenotype = data().deepCopy(fields()[0].schema(), other.phenotype);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.condition)) {
        this.condition = data().deepCopy(fields()[2].schema(), other.condition);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Annotation instance */
    private Builder(org.ensembl.genesearch.avro.Annotation other) {
            super(org.ensembl.genesearch.avro.Annotation.SCHEMA$);
      if (isValidValue(fields()[0], other.phenotype)) {
        this.phenotype = data().deepCopy(fields()[0].schema(), other.phenotype);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.host)) {
        this.host = data().deepCopy(fields()[1].schema(), other.host);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.condition)) {
        this.condition = data().deepCopy(fields()[2].schema(), other.condition);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'phenotype' field */
    public java.lang.CharSequence getPhenotype() {
      return phenotype;
    }
    
    /** Sets the value of the 'phenotype' field */
    public org.ensembl.genesearch.avro.Annotation.Builder setPhenotype(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.phenotype = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'phenotype' field has been set */
    public boolean hasPhenotype() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'phenotype' field */
    public org.ensembl.genesearch.avro.Annotation.Builder clearPhenotype() {
      phenotype = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'host' field */
    public java.lang.CharSequence getHost() {
      return host;
    }
    
    /** Sets the value of the 'host' field */
    public org.ensembl.genesearch.avro.Annotation.Builder setHost(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.host = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'host' field has been set */
    public boolean hasHost() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'host' field */
    public org.ensembl.genesearch.avro.Annotation.Builder clearHost() {
      host = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'condition' field */
    public java.lang.CharSequence getCondition() {
      return condition;
    }
    
    /** Sets the value of the 'condition' field */
    public org.ensembl.genesearch.avro.Annotation.Builder setCondition(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.condition = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'condition' field has been set */
    public boolean hasCondition() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'condition' field */
    public org.ensembl.genesearch.avro.Annotation.Builder clearCondition() {
      condition = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public Annotation build() {
      try {
        Annotation record = new Annotation();
        record.phenotype = fieldSetFlags()[0] ? this.phenotype : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.host = fieldSetFlags()[1] ? this.host : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.condition = fieldSetFlags()[2] ? this.condition : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
