/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.ensembl.genesearch.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Gene extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Gene\",\"namespace\":\"org.ensembl.genesearch.avro\",\"fields\":[{\"name\":\"lineage\",\"type\":\"string\"},{\"name\":\"Interpro\",\"type\":\"string\"},{\"name\":\"seq_region_name\",\"type\":\"string\"},{\"name\":\"genome\",\"type\":\"string\"},{\"name\":\"EMBL\",\"type\":\"string\"},{\"name\":\"RFAM\",\"type\":\"string\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"UniParc\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"taxon_id\",\"type\":\"string\"},{\"name\":\"hmmpanther\",\"type\":\"string\"},{\"name\":\"Uniprot_SWISSPROT\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"protein_id\",\"type\":\"string\"},{\"name\":\"hamap\",\"type\":\"string\"},{\"name\":\"scanprosite\",\"type\":\"string\"},{\"name\":\"KEGG\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"strand\",\"type\":\"boolean\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"PDB\",\"type\":\"string\"},{\"name\":\"transcripts\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Transcript\",\"fields\":[{\"name\":\"biotype\",\"type\":\"string\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"strand\",\"type\":\"boolean\"},{\"name\":\"name\",\"type\":\"string\"},{\"name\":\"seq_region_name\",\"type\":\"string\"},{\"name\":\"translations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Translation\",\"fields\":[{\"name\":\"id\",\"type\":\"string\"},{\"name\":\"coding_start\",\"type\":\"int\"},{\"name\":\"coding_end\",\"type\":\"int\"},{\"name\":\"xrefs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Xref\",\"fields\":[{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"linkage_types\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Linkage_type\",\"fields\":[{\"name\":\"evidence\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Source\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"associated_xrefs\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Associated_xref\",\"fields\":[{\"name\":\"experimental_evidence\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Experimental_evidence\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"display_id\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"}]}}},{\"name\":\"host\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Host\",\"fields\":[{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"display_id\",\"type\":\"string\"}]}}},{\"name\":\"phenotype\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Phenotype\",\"fields\":[{\"name\":\"primary_id\",\"type\":\"string\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"source\",\"type\":{\"type\":\"array\",\"items\":\"Source\"}},{\"name\":\"rank\",\"type\":\"int\"},{\"name\":\"display_id\",\"type\":\"string\"}]}}}]}}},{\"name\":\"parents\",\"type\":\"string\"}]}}},{\"name\":\"protein_features\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Protein_feature\",\"fields\":[{\"name\":\"start\",\"type\":\"int\"},{\"name\":\"end\",\"type\":\"int\"},{\"name\":\"dbname\",\"type\":\"string\"},{\"name\":\"interpro_ac\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"name\",\"type\":\"string\"}]}}}]}}},{\"name\":\"xrefs\",\"type\":{\"type\":\"array\",\"items\":\"Xref\"}}]}}},{\"name\":\"xrefs\",\"type\":{\"type\":\"array\",\"items\":\"Xref\"}},{\"name\":\"annotations\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Annotation\",\"fields\":[{\"name\":\"phenotype\",\"type\":\"string\"},{\"name\":\"host\",\"type\":\"string\"},{\"name\":\"condition\",\"type\":\"string\"}]}}},{\"name\":\"Uniprot_SPTREMBL\",\"type\":\"string\"},{\"name\":\"biotype\",\"type\":\"string\"},{\"name\":\"homologues\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Homologue\",\"fields\":[{\"name\":\"genome\",\"type\":\"string\"},{\"name\":\"description\",\"type\":\"string\"},{\"name\":\"stable_id\",\"type\":\"string\"}]}}},{\"name\":\"GO\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence lineage;
  @Deprecated public java.lang.CharSequence Interpro;
  @Deprecated public java.lang.CharSequence seq_region_name;
  @Deprecated public java.lang.CharSequence genome;
  @Deprecated public java.lang.CharSequence EMBL;
  @Deprecated public java.lang.CharSequence RFAM;
  @Deprecated public int end;
  @Deprecated public java.lang.CharSequence UniParc;
  @Deprecated public java.lang.CharSequence description;
  @Deprecated public java.lang.CharSequence taxon_id;
  @Deprecated public java.lang.CharSequence hmmpanther;
  @Deprecated public java.lang.CharSequence Uniprot_SWISSPROT;
  @Deprecated public java.lang.CharSequence id;
  @Deprecated public java.lang.CharSequence protein_id;
  @Deprecated public java.lang.CharSequence hamap;
  @Deprecated public java.lang.CharSequence scanprosite;
  @Deprecated public java.lang.CharSequence KEGG;
  @Deprecated public int start;
  @Deprecated public boolean strand;
  @Deprecated public java.lang.CharSequence name;
  @Deprecated public java.lang.CharSequence PDB;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Transcript> transcripts;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Xref> xrefs;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Annotation> annotations;
  @Deprecated public java.lang.CharSequence Uniprot_SPTREMBL;
  @Deprecated public java.lang.CharSequence biotype;
  @Deprecated public java.util.List<org.ensembl.genesearch.avro.Homologue> homologues;
  @Deprecated public java.lang.CharSequence GO;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Gene() {}

  /**
   * All-args constructor.
   */
  public Gene(java.lang.CharSequence lineage, java.lang.CharSequence Interpro, java.lang.CharSequence seq_region_name, java.lang.CharSequence genome, java.lang.CharSequence EMBL, java.lang.CharSequence RFAM, java.lang.Integer end, java.lang.CharSequence UniParc, java.lang.CharSequence description, java.lang.CharSequence taxon_id, java.lang.CharSequence hmmpanther, java.lang.CharSequence Uniprot_SWISSPROT, java.lang.CharSequence id, java.lang.CharSequence protein_id, java.lang.CharSequence hamap, java.lang.CharSequence scanprosite, java.lang.CharSequence KEGG, java.lang.Integer start, java.lang.Boolean strand, java.lang.CharSequence name, java.lang.CharSequence PDB, java.util.List<org.ensembl.genesearch.avro.Transcript> transcripts, java.util.List<org.ensembl.genesearch.avro.Xref> xrefs, java.util.List<org.ensembl.genesearch.avro.Annotation> annotations, java.lang.CharSequence Uniprot_SPTREMBL, java.lang.CharSequence biotype, java.util.List<org.ensembl.genesearch.avro.Homologue> homologues, java.lang.CharSequence GO) {
    this.lineage = lineage;
    this.Interpro = Interpro;
    this.seq_region_name = seq_region_name;
    this.genome = genome;
    this.EMBL = EMBL;
    this.RFAM = RFAM;
    this.end = end;
    this.UniParc = UniParc;
    this.description = description;
    this.taxon_id = taxon_id;
    this.hmmpanther = hmmpanther;
    this.Uniprot_SWISSPROT = Uniprot_SWISSPROT;
    this.id = id;
    this.protein_id = protein_id;
    this.hamap = hamap;
    this.scanprosite = scanprosite;
    this.KEGG = KEGG;
    this.start = start;
    this.strand = strand;
    this.name = name;
    this.PDB = PDB;
    this.transcripts = transcripts;
    this.xrefs = xrefs;
    this.annotations = annotations;
    this.Uniprot_SPTREMBL = Uniprot_SPTREMBL;
    this.biotype = biotype;
    this.homologues = homologues;
    this.GO = GO;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return lineage;
    case 1: return Interpro;
    case 2: return seq_region_name;
    case 3: return genome;
    case 4: return EMBL;
    case 5: return RFAM;
    case 6: return end;
    case 7: return UniParc;
    case 8: return description;
    case 9: return taxon_id;
    case 10: return hmmpanther;
    case 11: return Uniprot_SWISSPROT;
    case 12: return id;
    case 13: return protein_id;
    case 14: return hamap;
    case 15: return scanprosite;
    case 16: return KEGG;
    case 17: return start;
    case 18: return strand;
    case 19: return name;
    case 20: return PDB;
    case 21: return transcripts;
    case 22: return xrefs;
    case 23: return annotations;
    case 24: return Uniprot_SPTREMBL;
    case 25: return biotype;
    case 26: return homologues;
    case 27: return GO;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: lineage = (java.lang.CharSequence)value$; break;
    case 1: Interpro = (java.lang.CharSequence)value$; break;
    case 2: seq_region_name = (java.lang.CharSequence)value$; break;
    case 3: genome = (java.lang.CharSequence)value$; break;
    case 4: EMBL = (java.lang.CharSequence)value$; break;
    case 5: RFAM = (java.lang.CharSequence)value$; break;
    case 6: end = (java.lang.Integer)value$; break;
    case 7: UniParc = (java.lang.CharSequence)value$; break;
    case 8: description = (java.lang.CharSequence)value$; break;
    case 9: taxon_id = (java.lang.CharSequence)value$; break;
    case 10: hmmpanther = (java.lang.CharSequence)value$; break;
    case 11: Uniprot_SWISSPROT = (java.lang.CharSequence)value$; break;
    case 12: id = (java.lang.CharSequence)value$; break;
    case 13: protein_id = (java.lang.CharSequence)value$; break;
    case 14: hamap = (java.lang.CharSequence)value$; break;
    case 15: scanprosite = (java.lang.CharSequence)value$; break;
    case 16: KEGG = (java.lang.CharSequence)value$; break;
    case 17: start = (java.lang.Integer)value$; break;
    case 18: strand = (java.lang.Boolean)value$; break;
    case 19: name = (java.lang.CharSequence)value$; break;
    case 20: PDB = (java.lang.CharSequence)value$; break;
    case 21: transcripts = (java.util.List<org.ensembl.genesearch.avro.Transcript>)value$; break;
    case 22: xrefs = (java.util.List<org.ensembl.genesearch.avro.Xref>)value$; break;
    case 23: annotations = (java.util.List<org.ensembl.genesearch.avro.Annotation>)value$; break;
    case 24: Uniprot_SPTREMBL = (java.lang.CharSequence)value$; break;
    case 25: biotype = (java.lang.CharSequence)value$; break;
    case 26: homologues = (java.util.List<org.ensembl.genesearch.avro.Homologue>)value$; break;
    case 27: GO = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'lineage' field.
   */
  public java.lang.CharSequence getLineage() {
    return lineage;
  }

  /**
   * Sets the value of the 'lineage' field.
   * @param value the value to set.
   */
  public void setLineage(java.lang.CharSequence value) {
    this.lineage = value;
  }

  /**
   * Gets the value of the 'Interpro' field.
   */
  public java.lang.CharSequence getInterpro() {
    return Interpro;
  }

  /**
   * Sets the value of the 'Interpro' field.
   * @param value the value to set.
   */
  public void setInterpro(java.lang.CharSequence value) {
    this.Interpro = value;
  }

  /**
   * Gets the value of the 'seq_region_name' field.
   */
  public java.lang.CharSequence getSeqRegionName() {
    return seq_region_name;
  }

  /**
   * Sets the value of the 'seq_region_name' field.
   * @param value the value to set.
   */
  public void setSeqRegionName(java.lang.CharSequence value) {
    this.seq_region_name = value;
  }

  /**
   * Gets the value of the 'genome' field.
   */
  public java.lang.CharSequence getGenome() {
    return genome;
  }

  /**
   * Sets the value of the 'genome' field.
   * @param value the value to set.
   */
  public void setGenome(java.lang.CharSequence value) {
    this.genome = value;
  }

  /**
   * Gets the value of the 'EMBL' field.
   */
  public java.lang.CharSequence getEMBL() {
    return EMBL;
  }

  /**
   * Sets the value of the 'EMBL' field.
   * @param value the value to set.
   */
  public void setEMBL(java.lang.CharSequence value) {
    this.EMBL = value;
  }

  /**
   * Gets the value of the 'RFAM' field.
   */
  public java.lang.CharSequence getRFAM() {
    return RFAM;
  }

  /**
   * Sets the value of the 'RFAM' field.
   * @param value the value to set.
   */
  public void setRFAM(java.lang.CharSequence value) {
    this.RFAM = value;
  }

  /**
   * Gets the value of the 'end' field.
   */
  public java.lang.Integer getEnd() {
    return end;
  }

  /**
   * Sets the value of the 'end' field.
   * @param value the value to set.
   */
  public void setEnd(java.lang.Integer value) {
    this.end = value;
  }

  /**
   * Gets the value of the 'UniParc' field.
   */
  public java.lang.CharSequence getUniParc() {
    return UniParc;
  }

  /**
   * Sets the value of the 'UniParc' field.
   * @param value the value to set.
   */
  public void setUniParc(java.lang.CharSequence value) {
    this.UniParc = value;
  }

  /**
   * Gets the value of the 'description' field.
   */
  public java.lang.CharSequence getDescription() {
    return description;
  }

  /**
   * Sets the value of the 'description' field.
   * @param value the value to set.
   */
  public void setDescription(java.lang.CharSequence value) {
    this.description = value;
  }

  /**
   * Gets the value of the 'taxon_id' field.
   */
  public java.lang.CharSequence getTaxonId() {
    return taxon_id;
  }

  /**
   * Sets the value of the 'taxon_id' field.
   * @param value the value to set.
   */
  public void setTaxonId(java.lang.CharSequence value) {
    this.taxon_id = value;
  }

  /**
   * Gets the value of the 'hmmpanther' field.
   */
  public java.lang.CharSequence getHmmpanther() {
    return hmmpanther;
  }

  /**
   * Sets the value of the 'hmmpanther' field.
   * @param value the value to set.
   */
  public void setHmmpanther(java.lang.CharSequence value) {
    this.hmmpanther = value;
  }

  /**
   * Gets the value of the 'Uniprot_SWISSPROT' field.
   */
  public java.lang.CharSequence getUniprotSWISSPROT() {
    return Uniprot_SWISSPROT;
  }

  /**
   * Sets the value of the 'Uniprot_SWISSPROT' field.
   * @param value the value to set.
   */
  public void setUniprotSWISSPROT(java.lang.CharSequence value) {
    this.Uniprot_SWISSPROT = value;
  }

  /**
   * Gets the value of the 'id' field.
   */
  public java.lang.CharSequence getId() {
    return id;
  }

  /**
   * Sets the value of the 'id' field.
   * @param value the value to set.
   */
  public void setId(java.lang.CharSequence value) {
    this.id = value;
  }

  /**
   * Gets the value of the 'protein_id' field.
   */
  public java.lang.CharSequence getProteinId() {
    return protein_id;
  }

  /**
   * Sets the value of the 'protein_id' field.
   * @param value the value to set.
   */
  public void setProteinId(java.lang.CharSequence value) {
    this.protein_id = value;
  }

  /**
   * Gets the value of the 'hamap' field.
   */
  public java.lang.CharSequence getHamap() {
    return hamap;
  }

  /**
   * Sets the value of the 'hamap' field.
   * @param value the value to set.
   */
  public void setHamap(java.lang.CharSequence value) {
    this.hamap = value;
  }

  /**
   * Gets the value of the 'scanprosite' field.
   */
  public java.lang.CharSequence getScanprosite() {
    return scanprosite;
  }

  /**
   * Sets the value of the 'scanprosite' field.
   * @param value the value to set.
   */
  public void setScanprosite(java.lang.CharSequence value) {
    this.scanprosite = value;
  }

  /**
   * Gets the value of the 'KEGG' field.
   */
  public java.lang.CharSequence getKEGG() {
    return KEGG;
  }

  /**
   * Sets the value of the 'KEGG' field.
   * @param value the value to set.
   */
  public void setKEGG(java.lang.CharSequence value) {
    this.KEGG = value;
  }

  /**
   * Gets the value of the 'start' field.
   */
  public java.lang.Integer getStart() {
    return start;
  }

  /**
   * Sets the value of the 'start' field.
   * @param value the value to set.
   */
  public void setStart(java.lang.Integer value) {
    this.start = value;
  }

  /**
   * Gets the value of the 'strand' field.
   */
  public java.lang.Boolean getStrand() {
    return strand;
  }

  /**
   * Sets the value of the 'strand' field.
   * @param value the value to set.
   */
  public void setStrand(java.lang.Boolean value) {
    this.strand = value;
  }

  /**
   * Gets the value of the 'name' field.
   */
  public java.lang.CharSequence getName() {
    return name;
  }

  /**
   * Sets the value of the 'name' field.
   * @param value the value to set.
   */
  public void setName(java.lang.CharSequence value) {
    this.name = value;
  }

  /**
   * Gets the value of the 'PDB' field.
   */
  public java.lang.CharSequence getPDB() {
    return PDB;
  }

  /**
   * Sets the value of the 'PDB' field.
   * @param value the value to set.
   */
  public void setPDB(java.lang.CharSequence value) {
    this.PDB = value;
  }

  /**
   * Gets the value of the 'transcripts' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Transcript> getTranscripts() {
    return transcripts;
  }

  /**
   * Sets the value of the 'transcripts' field.
   * @param value the value to set.
   */
  public void setTranscripts(java.util.List<org.ensembl.genesearch.avro.Transcript> value) {
    this.transcripts = value;
  }

  /**
   * Gets the value of the 'xrefs' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Xref> getXrefs() {
    return xrefs;
  }

  /**
   * Sets the value of the 'xrefs' field.
   * @param value the value to set.
   */
  public void setXrefs(java.util.List<org.ensembl.genesearch.avro.Xref> value) {
    this.xrefs = value;
  }

  /**
   * Gets the value of the 'annotations' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Annotation> getAnnotations() {
    return annotations;
  }

  /**
   * Sets the value of the 'annotations' field.
   * @param value the value to set.
   */
  public void setAnnotations(java.util.List<org.ensembl.genesearch.avro.Annotation> value) {
    this.annotations = value;
  }

  /**
   * Gets the value of the 'Uniprot_SPTREMBL' field.
   */
  public java.lang.CharSequence getUniprotSPTREMBL() {
    return Uniprot_SPTREMBL;
  }

  /**
   * Sets the value of the 'Uniprot_SPTREMBL' field.
   * @param value the value to set.
   */
  public void setUniprotSPTREMBL(java.lang.CharSequence value) {
    this.Uniprot_SPTREMBL = value;
  }

  /**
   * Gets the value of the 'biotype' field.
   */
  public java.lang.CharSequence getBiotype() {
    return biotype;
  }

  /**
   * Sets the value of the 'biotype' field.
   * @param value the value to set.
   */
  public void setBiotype(java.lang.CharSequence value) {
    this.biotype = value;
  }

  /**
   * Gets the value of the 'homologues' field.
   */
  public java.util.List<org.ensembl.genesearch.avro.Homologue> getHomologues() {
    return homologues;
  }

  /**
   * Sets the value of the 'homologues' field.
   * @param value the value to set.
   */
  public void setHomologues(java.util.List<org.ensembl.genesearch.avro.Homologue> value) {
    this.homologues = value;
  }

  /**
   * Gets the value of the 'GO' field.
   */
  public java.lang.CharSequence getGO() {
    return GO;
  }

  /**
   * Sets the value of the 'GO' field.
   * @param value the value to set.
   */
  public void setGO(java.lang.CharSequence value) {
    this.GO = value;
  }

  /** Creates a new Gene RecordBuilder */
  public static org.ensembl.genesearch.avro.Gene.Builder newBuilder() {
    return new org.ensembl.genesearch.avro.Gene.Builder();
  }
  
  /** Creates a new Gene RecordBuilder by copying an existing Builder */
  public static org.ensembl.genesearch.avro.Gene.Builder newBuilder(org.ensembl.genesearch.avro.Gene.Builder other) {
    return new org.ensembl.genesearch.avro.Gene.Builder(other);
  }
  
  /** Creates a new Gene RecordBuilder by copying an existing Gene instance */
  public static org.ensembl.genesearch.avro.Gene.Builder newBuilder(org.ensembl.genesearch.avro.Gene other) {
    return new org.ensembl.genesearch.avro.Gene.Builder(other);
  }
  
  /**
   * RecordBuilder for Gene instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Gene>
    implements org.apache.avro.data.RecordBuilder<Gene> {

    private java.lang.CharSequence lineage;
    private java.lang.CharSequence Interpro;
    private java.lang.CharSequence seq_region_name;
    private java.lang.CharSequence genome;
    private java.lang.CharSequence EMBL;
    private java.lang.CharSequence RFAM;
    private int end;
    private java.lang.CharSequence UniParc;
    private java.lang.CharSequence description;
    private java.lang.CharSequence taxon_id;
    private java.lang.CharSequence hmmpanther;
    private java.lang.CharSequence Uniprot_SWISSPROT;
    private java.lang.CharSequence id;
    private java.lang.CharSequence protein_id;
    private java.lang.CharSequence hamap;
    private java.lang.CharSequence scanprosite;
    private java.lang.CharSequence KEGG;
    private int start;
    private boolean strand;
    private java.lang.CharSequence name;
    private java.lang.CharSequence PDB;
    private java.util.List<org.ensembl.genesearch.avro.Transcript> transcripts;
    private java.util.List<org.ensembl.genesearch.avro.Xref> xrefs;
    private java.util.List<org.ensembl.genesearch.avro.Annotation> annotations;
    private java.lang.CharSequence Uniprot_SPTREMBL;
    private java.lang.CharSequence biotype;
    private java.util.List<org.ensembl.genesearch.avro.Homologue> homologues;
    private java.lang.CharSequence GO;

    /** Creates a new Builder */
    private Builder() {
      super(org.ensembl.genesearch.avro.Gene.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.ensembl.genesearch.avro.Gene.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.lineage)) {
        this.lineage = data().deepCopy(fields()[0].schema(), other.lineage);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Interpro)) {
        this.Interpro = data().deepCopy(fields()[1].schema(), other.Interpro);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seq_region_name)) {
        this.seq_region_name = data().deepCopy(fields()[2].schema(), other.seq_region_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.genome)) {
        this.genome = data().deepCopy(fields()[3].schema(), other.genome);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.EMBL)) {
        this.EMBL = data().deepCopy(fields()[4].schema(), other.EMBL);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.RFAM)) {
        this.RFAM = data().deepCopy(fields()[5].schema(), other.RFAM);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.end)) {
        this.end = data().deepCopy(fields()[6].schema(), other.end);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.UniParc)) {
        this.UniParc = data().deepCopy(fields()[7].schema(), other.UniParc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.taxon_id)) {
        this.taxon_id = data().deepCopy(fields()[9].schema(), other.taxon_id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.hmmpanther)) {
        this.hmmpanther = data().deepCopy(fields()[10].schema(), other.hmmpanther);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.Uniprot_SWISSPROT)) {
        this.Uniprot_SWISSPROT = data().deepCopy(fields()[11].schema(), other.Uniprot_SWISSPROT);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.id)) {
        this.id = data().deepCopy(fields()[12].schema(), other.id);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.protein_id)) {
        this.protein_id = data().deepCopy(fields()[13].schema(), other.protein_id);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.hamap)) {
        this.hamap = data().deepCopy(fields()[14].schema(), other.hamap);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.scanprosite)) {
        this.scanprosite = data().deepCopy(fields()[15].schema(), other.scanprosite);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.KEGG)) {
        this.KEGG = data().deepCopy(fields()[16].schema(), other.KEGG);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.start)) {
        this.start = data().deepCopy(fields()[17].schema(), other.start);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.strand)) {
        this.strand = data().deepCopy(fields()[18].schema(), other.strand);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.name)) {
        this.name = data().deepCopy(fields()[19].schema(), other.name);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.PDB)) {
        this.PDB = data().deepCopy(fields()[20].schema(), other.PDB);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transcripts)) {
        this.transcripts = data().deepCopy(fields()[21].schema(), other.transcripts);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[22].schema(), other.xrefs);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.annotations)) {
        this.annotations = data().deepCopy(fields()[23].schema(), other.annotations);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.Uniprot_SPTREMBL)) {
        this.Uniprot_SPTREMBL = data().deepCopy(fields()[24].schema(), other.Uniprot_SPTREMBL);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.biotype)) {
        this.biotype = data().deepCopy(fields()[25].schema(), other.biotype);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.homologues)) {
        this.homologues = data().deepCopy(fields()[26].schema(), other.homologues);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.GO)) {
        this.GO = data().deepCopy(fields()[27].schema(), other.GO);
        fieldSetFlags()[27] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Gene instance */
    private Builder(org.ensembl.genesearch.avro.Gene other) {
            super(org.ensembl.genesearch.avro.Gene.SCHEMA$);
      if (isValidValue(fields()[0], other.lineage)) {
        this.lineage = data().deepCopy(fields()[0].schema(), other.lineage);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.Interpro)) {
        this.Interpro = data().deepCopy(fields()[1].schema(), other.Interpro);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.seq_region_name)) {
        this.seq_region_name = data().deepCopy(fields()[2].schema(), other.seq_region_name);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.genome)) {
        this.genome = data().deepCopy(fields()[3].schema(), other.genome);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.EMBL)) {
        this.EMBL = data().deepCopy(fields()[4].schema(), other.EMBL);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.RFAM)) {
        this.RFAM = data().deepCopy(fields()[5].schema(), other.RFAM);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.end)) {
        this.end = data().deepCopy(fields()[6].schema(), other.end);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.UniParc)) {
        this.UniParc = data().deepCopy(fields()[7].schema(), other.UniParc);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.description)) {
        this.description = data().deepCopy(fields()[8].schema(), other.description);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.taxon_id)) {
        this.taxon_id = data().deepCopy(fields()[9].schema(), other.taxon_id);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.hmmpanther)) {
        this.hmmpanther = data().deepCopy(fields()[10].schema(), other.hmmpanther);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.Uniprot_SWISSPROT)) {
        this.Uniprot_SWISSPROT = data().deepCopy(fields()[11].schema(), other.Uniprot_SWISSPROT);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.id)) {
        this.id = data().deepCopy(fields()[12].schema(), other.id);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.protein_id)) {
        this.protein_id = data().deepCopy(fields()[13].schema(), other.protein_id);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.hamap)) {
        this.hamap = data().deepCopy(fields()[14].schema(), other.hamap);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.scanprosite)) {
        this.scanprosite = data().deepCopy(fields()[15].schema(), other.scanprosite);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.KEGG)) {
        this.KEGG = data().deepCopy(fields()[16].schema(), other.KEGG);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.start)) {
        this.start = data().deepCopy(fields()[17].schema(), other.start);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.strand)) {
        this.strand = data().deepCopy(fields()[18].schema(), other.strand);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.name)) {
        this.name = data().deepCopy(fields()[19].schema(), other.name);
        fieldSetFlags()[19] = true;
      }
      if (isValidValue(fields()[20], other.PDB)) {
        this.PDB = data().deepCopy(fields()[20].schema(), other.PDB);
        fieldSetFlags()[20] = true;
      }
      if (isValidValue(fields()[21], other.transcripts)) {
        this.transcripts = data().deepCopy(fields()[21].schema(), other.transcripts);
        fieldSetFlags()[21] = true;
      }
      if (isValidValue(fields()[22], other.xrefs)) {
        this.xrefs = data().deepCopy(fields()[22].schema(), other.xrefs);
        fieldSetFlags()[22] = true;
      }
      if (isValidValue(fields()[23], other.annotations)) {
        this.annotations = data().deepCopy(fields()[23].schema(), other.annotations);
        fieldSetFlags()[23] = true;
      }
      if (isValidValue(fields()[24], other.Uniprot_SPTREMBL)) {
        this.Uniprot_SPTREMBL = data().deepCopy(fields()[24].schema(), other.Uniprot_SPTREMBL);
        fieldSetFlags()[24] = true;
      }
      if (isValidValue(fields()[25], other.biotype)) {
        this.biotype = data().deepCopy(fields()[25].schema(), other.biotype);
        fieldSetFlags()[25] = true;
      }
      if (isValidValue(fields()[26], other.homologues)) {
        this.homologues = data().deepCopy(fields()[26].schema(), other.homologues);
        fieldSetFlags()[26] = true;
      }
      if (isValidValue(fields()[27], other.GO)) {
        this.GO = data().deepCopy(fields()[27].schema(), other.GO);
        fieldSetFlags()[27] = true;
      }
    }

    /** Gets the value of the 'lineage' field */
    public java.lang.CharSequence getLineage() {
      return lineage;
    }
    
    /** Sets the value of the 'lineage' field */
    public org.ensembl.genesearch.avro.Gene.Builder setLineage(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.lineage = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'lineage' field has been set */
    public boolean hasLineage() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'lineage' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearLineage() {
      lineage = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'Interpro' field */
    public java.lang.CharSequence getInterpro() {
      return Interpro;
    }
    
    /** Sets the value of the 'Interpro' field */
    public org.ensembl.genesearch.avro.Gene.Builder setInterpro(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.Interpro = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'Interpro' field has been set */
    public boolean hasInterpro() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'Interpro' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearInterpro() {
      Interpro = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'seq_region_name' field */
    public java.lang.CharSequence getSeqRegionName() {
      return seq_region_name;
    }
    
    /** Sets the value of the 'seq_region_name' field */
    public org.ensembl.genesearch.avro.Gene.Builder setSeqRegionName(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.seq_region_name = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'seq_region_name' field has been set */
    public boolean hasSeqRegionName() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'seq_region_name' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearSeqRegionName() {
      seq_region_name = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'genome' field */
    public java.lang.CharSequence getGenome() {
      return genome;
    }
    
    /** Sets the value of the 'genome' field */
    public org.ensembl.genesearch.avro.Gene.Builder setGenome(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.genome = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'genome' field has been set */
    public boolean hasGenome() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'genome' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearGenome() {
      genome = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'EMBL' field */
    public java.lang.CharSequence getEMBL() {
      return EMBL;
    }
    
    /** Sets the value of the 'EMBL' field */
    public org.ensembl.genesearch.avro.Gene.Builder setEMBL(java.lang.CharSequence value) {
      validate(fields()[4], value);
      this.EMBL = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'EMBL' field has been set */
    public boolean hasEMBL() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'EMBL' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearEMBL() {
      EMBL = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /** Gets the value of the 'RFAM' field */
    public java.lang.CharSequence getRFAM() {
      return RFAM;
    }
    
    /** Sets the value of the 'RFAM' field */
    public org.ensembl.genesearch.avro.Gene.Builder setRFAM(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.RFAM = value;
      fieldSetFlags()[5] = true;
      return this; 
    }
    
    /** Checks whether the 'RFAM' field has been set */
    public boolean hasRFAM() {
      return fieldSetFlags()[5];
    }
    
    /** Clears the value of the 'RFAM' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearRFAM() {
      RFAM = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /** Gets the value of the 'end' field */
    public java.lang.Integer getEnd() {
      return end;
    }
    
    /** Sets the value of the 'end' field */
    public org.ensembl.genesearch.avro.Gene.Builder setEnd(int value) {
      validate(fields()[6], value);
      this.end = value;
      fieldSetFlags()[6] = true;
      return this; 
    }
    
    /** Checks whether the 'end' field has been set */
    public boolean hasEnd() {
      return fieldSetFlags()[6];
    }
    
    /** Clears the value of the 'end' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearEnd() {
      fieldSetFlags()[6] = false;
      return this;
    }

    /** Gets the value of the 'UniParc' field */
    public java.lang.CharSequence getUniParc() {
      return UniParc;
    }
    
    /** Sets the value of the 'UniParc' field */
    public org.ensembl.genesearch.avro.Gene.Builder setUniParc(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.UniParc = value;
      fieldSetFlags()[7] = true;
      return this; 
    }
    
    /** Checks whether the 'UniParc' field has been set */
    public boolean hasUniParc() {
      return fieldSetFlags()[7];
    }
    
    /** Clears the value of the 'UniParc' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearUniParc() {
      UniParc = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /** Gets the value of the 'description' field */
    public java.lang.CharSequence getDescription() {
      return description;
    }
    
    /** Sets the value of the 'description' field */
    public org.ensembl.genesearch.avro.Gene.Builder setDescription(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.description = value;
      fieldSetFlags()[8] = true;
      return this; 
    }
    
    /** Checks whether the 'description' field has been set */
    public boolean hasDescription() {
      return fieldSetFlags()[8];
    }
    
    /** Clears the value of the 'description' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearDescription() {
      description = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /** Gets the value of the 'taxon_id' field */
    public java.lang.CharSequence getTaxonId() {
      return taxon_id;
    }
    
    /** Sets the value of the 'taxon_id' field */
    public org.ensembl.genesearch.avro.Gene.Builder setTaxonId(java.lang.CharSequence value) {
      validate(fields()[9], value);
      this.taxon_id = value;
      fieldSetFlags()[9] = true;
      return this; 
    }
    
    /** Checks whether the 'taxon_id' field has been set */
    public boolean hasTaxonId() {
      return fieldSetFlags()[9];
    }
    
    /** Clears the value of the 'taxon_id' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearTaxonId() {
      taxon_id = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /** Gets the value of the 'hmmpanther' field */
    public java.lang.CharSequence getHmmpanther() {
      return hmmpanther;
    }
    
    /** Sets the value of the 'hmmpanther' field */
    public org.ensembl.genesearch.avro.Gene.Builder setHmmpanther(java.lang.CharSequence value) {
      validate(fields()[10], value);
      this.hmmpanther = value;
      fieldSetFlags()[10] = true;
      return this; 
    }
    
    /** Checks whether the 'hmmpanther' field has been set */
    public boolean hasHmmpanther() {
      return fieldSetFlags()[10];
    }
    
    /** Clears the value of the 'hmmpanther' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearHmmpanther() {
      hmmpanther = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /** Gets the value of the 'Uniprot_SWISSPROT' field */
    public java.lang.CharSequence getUniprotSWISSPROT() {
      return Uniprot_SWISSPROT;
    }
    
    /** Sets the value of the 'Uniprot_SWISSPROT' field */
    public org.ensembl.genesearch.avro.Gene.Builder setUniprotSWISSPROT(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.Uniprot_SWISSPROT = value;
      fieldSetFlags()[11] = true;
      return this; 
    }
    
    /** Checks whether the 'Uniprot_SWISSPROT' field has been set */
    public boolean hasUniprotSWISSPROT() {
      return fieldSetFlags()[11];
    }
    
    /** Clears the value of the 'Uniprot_SWISSPROT' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearUniprotSWISSPROT() {
      Uniprot_SWISSPROT = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /** Gets the value of the 'id' field */
    public java.lang.CharSequence getId() {
      return id;
    }
    
    /** Sets the value of the 'id' field */
    public org.ensembl.genesearch.avro.Gene.Builder setId(java.lang.CharSequence value) {
      validate(fields()[12], value);
      this.id = value;
      fieldSetFlags()[12] = true;
      return this; 
    }
    
    /** Checks whether the 'id' field has been set */
    public boolean hasId() {
      return fieldSetFlags()[12];
    }
    
    /** Clears the value of the 'id' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearId() {
      id = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /** Gets the value of the 'protein_id' field */
    public java.lang.CharSequence getProteinId() {
      return protein_id;
    }
    
    /** Sets the value of the 'protein_id' field */
    public org.ensembl.genesearch.avro.Gene.Builder setProteinId(java.lang.CharSequence value) {
      validate(fields()[13], value);
      this.protein_id = value;
      fieldSetFlags()[13] = true;
      return this; 
    }
    
    /** Checks whether the 'protein_id' field has been set */
    public boolean hasProteinId() {
      return fieldSetFlags()[13];
    }
    
    /** Clears the value of the 'protein_id' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearProteinId() {
      protein_id = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /** Gets the value of the 'hamap' field */
    public java.lang.CharSequence getHamap() {
      return hamap;
    }
    
    /** Sets the value of the 'hamap' field */
    public org.ensembl.genesearch.avro.Gene.Builder setHamap(java.lang.CharSequence value) {
      validate(fields()[14], value);
      this.hamap = value;
      fieldSetFlags()[14] = true;
      return this; 
    }
    
    /** Checks whether the 'hamap' field has been set */
    public boolean hasHamap() {
      return fieldSetFlags()[14];
    }
    
    /** Clears the value of the 'hamap' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearHamap() {
      hamap = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /** Gets the value of the 'scanprosite' field */
    public java.lang.CharSequence getScanprosite() {
      return scanprosite;
    }
    
    /** Sets the value of the 'scanprosite' field */
    public org.ensembl.genesearch.avro.Gene.Builder setScanprosite(java.lang.CharSequence value) {
      validate(fields()[15], value);
      this.scanprosite = value;
      fieldSetFlags()[15] = true;
      return this; 
    }
    
    /** Checks whether the 'scanprosite' field has been set */
    public boolean hasScanprosite() {
      return fieldSetFlags()[15];
    }
    
    /** Clears the value of the 'scanprosite' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearScanprosite() {
      scanprosite = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /** Gets the value of the 'KEGG' field */
    public java.lang.CharSequence getKEGG() {
      return KEGG;
    }
    
    /** Sets the value of the 'KEGG' field */
    public org.ensembl.genesearch.avro.Gene.Builder setKEGG(java.lang.CharSequence value) {
      validate(fields()[16], value);
      this.KEGG = value;
      fieldSetFlags()[16] = true;
      return this; 
    }
    
    /** Checks whether the 'KEGG' field has been set */
    public boolean hasKEGG() {
      return fieldSetFlags()[16];
    }
    
    /** Clears the value of the 'KEGG' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearKEGG() {
      KEGG = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /** Gets the value of the 'start' field */
    public java.lang.Integer getStart() {
      return start;
    }
    
    /** Sets the value of the 'start' field */
    public org.ensembl.genesearch.avro.Gene.Builder setStart(int value) {
      validate(fields()[17], value);
      this.start = value;
      fieldSetFlags()[17] = true;
      return this; 
    }
    
    /** Checks whether the 'start' field has been set */
    public boolean hasStart() {
      return fieldSetFlags()[17];
    }
    
    /** Clears the value of the 'start' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearStart() {
      fieldSetFlags()[17] = false;
      return this;
    }

    /** Gets the value of the 'strand' field */
    public java.lang.Boolean getStrand() {
      return strand;
    }
    
    /** Sets the value of the 'strand' field */
    public org.ensembl.genesearch.avro.Gene.Builder setStrand(boolean value) {
      validate(fields()[18], value);
      this.strand = value;
      fieldSetFlags()[18] = true;
      return this; 
    }
    
    /** Checks whether the 'strand' field has been set */
    public boolean hasStrand() {
      return fieldSetFlags()[18];
    }
    
    /** Clears the value of the 'strand' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearStrand() {
      fieldSetFlags()[18] = false;
      return this;
    }

    /** Gets the value of the 'name' field */
    public java.lang.CharSequence getName() {
      return name;
    }
    
    /** Sets the value of the 'name' field */
    public org.ensembl.genesearch.avro.Gene.Builder setName(java.lang.CharSequence value) {
      validate(fields()[19], value);
      this.name = value;
      fieldSetFlags()[19] = true;
      return this; 
    }
    
    /** Checks whether the 'name' field has been set */
    public boolean hasName() {
      return fieldSetFlags()[19];
    }
    
    /** Clears the value of the 'name' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearName() {
      name = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    /** Gets the value of the 'PDB' field */
    public java.lang.CharSequence getPDB() {
      return PDB;
    }
    
    /** Sets the value of the 'PDB' field */
    public org.ensembl.genesearch.avro.Gene.Builder setPDB(java.lang.CharSequence value) {
      validate(fields()[20], value);
      this.PDB = value;
      fieldSetFlags()[20] = true;
      return this; 
    }
    
    /** Checks whether the 'PDB' field has been set */
    public boolean hasPDB() {
      return fieldSetFlags()[20];
    }
    
    /** Clears the value of the 'PDB' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearPDB() {
      PDB = null;
      fieldSetFlags()[20] = false;
      return this;
    }

    /** Gets the value of the 'transcripts' field */
    public java.util.List<org.ensembl.genesearch.avro.Transcript> getTranscripts() {
      return transcripts;
    }
    
    /** Sets the value of the 'transcripts' field */
    public org.ensembl.genesearch.avro.Gene.Builder setTranscripts(java.util.List<org.ensembl.genesearch.avro.Transcript> value) {
      validate(fields()[21], value);
      this.transcripts = value;
      fieldSetFlags()[21] = true;
      return this; 
    }
    
    /** Checks whether the 'transcripts' field has been set */
    public boolean hasTranscripts() {
      return fieldSetFlags()[21];
    }
    
    /** Clears the value of the 'transcripts' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearTranscripts() {
      transcripts = null;
      fieldSetFlags()[21] = false;
      return this;
    }

    /** Gets the value of the 'xrefs' field */
    public java.util.List<org.ensembl.genesearch.avro.Xref> getXrefs() {
      return xrefs;
    }
    
    /** Sets the value of the 'xrefs' field */
    public org.ensembl.genesearch.avro.Gene.Builder setXrefs(java.util.List<org.ensembl.genesearch.avro.Xref> value) {
      validate(fields()[22], value);
      this.xrefs = value;
      fieldSetFlags()[22] = true;
      return this; 
    }
    
    /** Checks whether the 'xrefs' field has been set */
    public boolean hasXrefs() {
      return fieldSetFlags()[22];
    }
    
    /** Clears the value of the 'xrefs' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearXrefs() {
      xrefs = null;
      fieldSetFlags()[22] = false;
      return this;
    }

    /** Gets the value of the 'annotations' field */
    public java.util.List<org.ensembl.genesearch.avro.Annotation> getAnnotations() {
      return annotations;
    }
    
    /** Sets the value of the 'annotations' field */
    public org.ensembl.genesearch.avro.Gene.Builder setAnnotations(java.util.List<org.ensembl.genesearch.avro.Annotation> value) {
      validate(fields()[23], value);
      this.annotations = value;
      fieldSetFlags()[23] = true;
      return this; 
    }
    
    /** Checks whether the 'annotations' field has been set */
    public boolean hasAnnotations() {
      return fieldSetFlags()[23];
    }
    
    /** Clears the value of the 'annotations' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearAnnotations() {
      annotations = null;
      fieldSetFlags()[23] = false;
      return this;
    }

    /** Gets the value of the 'Uniprot_SPTREMBL' field */
    public java.lang.CharSequence getUniprotSPTREMBL() {
      return Uniprot_SPTREMBL;
    }
    
    /** Sets the value of the 'Uniprot_SPTREMBL' field */
    public org.ensembl.genesearch.avro.Gene.Builder setUniprotSPTREMBL(java.lang.CharSequence value) {
      validate(fields()[24], value);
      this.Uniprot_SPTREMBL = value;
      fieldSetFlags()[24] = true;
      return this; 
    }
    
    /** Checks whether the 'Uniprot_SPTREMBL' field has been set */
    public boolean hasUniprotSPTREMBL() {
      return fieldSetFlags()[24];
    }
    
    /** Clears the value of the 'Uniprot_SPTREMBL' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearUniprotSPTREMBL() {
      Uniprot_SPTREMBL = null;
      fieldSetFlags()[24] = false;
      return this;
    }

    /** Gets the value of the 'biotype' field */
    public java.lang.CharSequence getBiotype() {
      return biotype;
    }
    
    /** Sets the value of the 'biotype' field */
    public org.ensembl.genesearch.avro.Gene.Builder setBiotype(java.lang.CharSequence value) {
      validate(fields()[25], value);
      this.biotype = value;
      fieldSetFlags()[25] = true;
      return this; 
    }
    
    /** Checks whether the 'biotype' field has been set */
    public boolean hasBiotype() {
      return fieldSetFlags()[25];
    }
    
    /** Clears the value of the 'biotype' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearBiotype() {
      biotype = null;
      fieldSetFlags()[25] = false;
      return this;
    }

    /** Gets the value of the 'homologues' field */
    public java.util.List<org.ensembl.genesearch.avro.Homologue> getHomologues() {
      return homologues;
    }
    
    /** Sets the value of the 'homologues' field */
    public org.ensembl.genesearch.avro.Gene.Builder setHomologues(java.util.List<org.ensembl.genesearch.avro.Homologue> value) {
      validate(fields()[26], value);
      this.homologues = value;
      fieldSetFlags()[26] = true;
      return this; 
    }
    
    /** Checks whether the 'homologues' field has been set */
    public boolean hasHomologues() {
      return fieldSetFlags()[26];
    }
    
    /** Clears the value of the 'homologues' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearHomologues() {
      homologues = null;
      fieldSetFlags()[26] = false;
      return this;
    }

    /** Gets the value of the 'GO' field */
    public java.lang.CharSequence getGO() {
      return GO;
    }
    
    /** Sets the value of the 'GO' field */
    public org.ensembl.genesearch.avro.Gene.Builder setGO(java.lang.CharSequence value) {
      validate(fields()[27], value);
      this.GO = value;
      fieldSetFlags()[27] = true;
      return this; 
    }
    
    /** Checks whether the 'GO' field has been set */
    public boolean hasGO() {
      return fieldSetFlags()[27];
    }
    
    /** Clears the value of the 'GO' field */
    public org.ensembl.genesearch.avro.Gene.Builder clearGO() {
      GO = null;
      fieldSetFlags()[27] = false;
      return this;
    }

    @Override
    public Gene build() {
      try {
        Gene record = new Gene();
        record.lineage = fieldSetFlags()[0] ? this.lineage : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.Interpro = fieldSetFlags()[1] ? this.Interpro : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.seq_region_name = fieldSetFlags()[2] ? this.seq_region_name : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.genome = fieldSetFlags()[3] ? this.genome : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.EMBL = fieldSetFlags()[4] ? this.EMBL : (java.lang.CharSequence) defaultValue(fields()[4]);
        record.RFAM = fieldSetFlags()[5] ? this.RFAM : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.end = fieldSetFlags()[6] ? this.end : (java.lang.Integer) defaultValue(fields()[6]);
        record.UniParc = fieldSetFlags()[7] ? this.UniParc : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.description = fieldSetFlags()[8] ? this.description : (java.lang.CharSequence) defaultValue(fields()[8]);
        record.taxon_id = fieldSetFlags()[9] ? this.taxon_id : (java.lang.CharSequence) defaultValue(fields()[9]);
        record.hmmpanther = fieldSetFlags()[10] ? this.hmmpanther : (java.lang.CharSequence) defaultValue(fields()[10]);
        record.Uniprot_SWISSPROT = fieldSetFlags()[11] ? this.Uniprot_SWISSPROT : (java.lang.CharSequence) defaultValue(fields()[11]);
        record.id = fieldSetFlags()[12] ? this.id : (java.lang.CharSequence) defaultValue(fields()[12]);
        record.protein_id = fieldSetFlags()[13] ? this.protein_id : (java.lang.CharSequence) defaultValue(fields()[13]);
        record.hamap = fieldSetFlags()[14] ? this.hamap : (java.lang.CharSequence) defaultValue(fields()[14]);
        record.scanprosite = fieldSetFlags()[15] ? this.scanprosite : (java.lang.CharSequence) defaultValue(fields()[15]);
        record.KEGG = fieldSetFlags()[16] ? this.KEGG : (java.lang.CharSequence) defaultValue(fields()[16]);
        record.start = fieldSetFlags()[17] ? this.start : (java.lang.Integer) defaultValue(fields()[17]);
        record.strand = fieldSetFlags()[18] ? this.strand : (java.lang.Boolean) defaultValue(fields()[18]);
        record.name = fieldSetFlags()[19] ? this.name : (java.lang.CharSequence) defaultValue(fields()[19]);
        record.PDB = fieldSetFlags()[20] ? this.PDB : (java.lang.CharSequence) defaultValue(fields()[20]);
        record.transcripts = fieldSetFlags()[21] ? this.transcripts : (java.util.List<org.ensembl.genesearch.avro.Transcript>) defaultValue(fields()[21]);
        record.xrefs = fieldSetFlags()[22] ? this.xrefs : (java.util.List<org.ensembl.genesearch.avro.Xref>) defaultValue(fields()[22]);
        record.annotations = fieldSetFlags()[23] ? this.annotations : (java.util.List<org.ensembl.genesearch.avro.Annotation>) defaultValue(fields()[23]);
        record.Uniprot_SPTREMBL = fieldSetFlags()[24] ? this.Uniprot_SPTREMBL : (java.lang.CharSequence) defaultValue(fields()[24]);
        record.biotype = fieldSetFlags()[25] ? this.biotype : (java.lang.CharSequence) defaultValue(fields()[25]);
        record.homologues = fieldSetFlags()[26] ? this.homologues : (java.util.List<org.ensembl.genesearch.avro.Homologue>) defaultValue(fields()[26]);
        record.GO = fieldSetFlags()[27] ? this.GO : (java.lang.CharSequence) defaultValue(fields()[27]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
